from uuid import uuid4from apps.wallet.models import WalletModelfrom decouple import configfrom django.conf import settingsfrom django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixinfrom django.db import modelsfrom django.db.models.signals import post_savefrom django.dispatch import receiverfrom rest_framework import statusfrom rest_framework.authtoken.models import Tokenfrom rest_framework.response import Responsefrom apps.accounts.utils import create_wallet_utilPRODUCTION_HOST = config("PRODUCTION_HOST")def upload_location(instance, filename):    ext = filename.split('.')[-1]    if ext in ['jpeg', 'png', 'jpg', 'jfif', 'webp']:        file_path = 'accounts/avatars/{user_id}-{phone_number}'.format(            user_id=str(instance.id), phone_number='{}.{}'.format(uuid4().hex, ext))        return file_path    else:        return Response(status=status.HTTP_510_NOT_EXTENDED)class MyAccountManager(BaseUserManager):    def create_user(self, phone_number, password=None):        if not phone_number:            raise ValueError("Users must have phone number")        user = self.model(            phone_number=phone_number,        )        if password:            user.set_password(password)        user.save(using=self._db)        return user    def create_superuser(self,  phone_number, password):        user = self.create_user(            password=password,            phone_number=phone_number,        )        user.is_admin = True        user.is_staff = True        user.is_superuser = True        user.save(using=self._db)        return userclass Account(AbstractBaseUser, PermissionsMixin):    email = models.EmailField(verbose_name="email", max_length=60, blank=True, null=True)    phone_number = models.CharField(max_length=200, unique=True)    first_name = models.CharField(max_length=255, blank=True, null=True)    last_name = models.CharField(max_length=255, blank=True, null=True)    username = models.CharField(max_length=255, blank=True, null=True)    bio = models.CharField(max_length=255, blank=True, null=True)    # sex = models.BooleanField(blank=True, null=True)    # date_birth = models.DateTimeField(blank=True, null=True)    # profile_picture = models.ImageField(upload_to=upload_location, null=True, blank=True)    date_joined = models.DateTimeField(verbose_name='date joined', auto_now_add=True)    # last_login = models.DateTimeField(verbose_name='last login', auto_now=True)    is_admin = models.BooleanField(default=False)    is_active = models.BooleanField(default=True)    is_staff = models.BooleanField(default=False)    is_superuser = models.BooleanField(default=False)    USERNAME_FIELD = 'phone_number'    REQUIRED_FIELDS = []    # REQUIRED_FIELDS = ['first_name']    objects = MyAccountManager()    def __str__(self):        return f'{self.phone_number}'    class Meta:        app_label = "accounts"@receiver(post_save, sender=settings.AUTH_USER_MODEL)def create_auth_token(sender, instance=None, created=False, **kwargs):    if created:        Token.objects.create(user=instance)@receiver(post_save, sender=settings.AUTH_USER_MODEL)def create_wallet(sender, instance: Account = None, created=False, **kwargs):    if created:        data = create_wallet_util(instance.phone_number)        if data:            card_number = data['result']['card_number']            expire = data['result']['expire']            WalletModel.objects.create(                owner=instance,                card_number=card_number,                expire=expire,                # type=False            )class NotificationModel(models.Model):    message = models.CharField(max_length=128,blank=True,null=True)    is_active = models.BooleanField(default=True,blank=True,null=True)    def __str__(self):        return self.message