import uuidfrom typing import Unionfrom decouple import configfrom rest_framework import statusfrom rest_framework.response import Responsefrom apps.accounts.models import OtpModel, Accountfrom apps.wallet.models import TransactionsModel, TransferW2WModel, WalletModelfrom super_app.requests_control.requests import accioWALLET_EPOS = config("WALLET_EPOS")print(WALLET_EPOS)def transaction_log(response, sender, receiver, amount, method, debit_status, credit_status):    if response['status']:        try:            tr_obj = TransactionsModel.objects.create(                sender=sender, tr_id=response['result']['tr_id'],                debit_status=debit_status,                credit_status=credit_status, amount=amount,                receiver=receiver, option=method, context=str(response)            )        except:            return {'status': True, 'message': "TransferModel object create failed!",                    'result': response}        response['log'] = 'Successful'        return response, tr_obj    else:        tr_obj = TransactionsModel.objects.create(            sender=sender, tr_id="**********",            status=False, amount=amount,            receiver=receiver, option=method, context=str(response)        )        response['log'] = 'Unsuccessful'        return response, tr_objdef transfer_service(wallet, data):    payload = {        "id": "{{$randomUUID}}",        "method": "transfer.cardtowallet",        "params": {            "number": f"{data['number']}",            "expire": f"{data['expire']}",            "receiver": f"{wallet.card_number}",            "amount": f"{data['amount']}",        }    }    print(f"payload: {payload}")    try:        resp_data = accio(payload=payload, service_name='ucoin')    except:        return Response(status.HTTP_404_NOT_FOUND)    if resp_data['status']:        try:            TransactionsModel.objects.create(                sender=data['number'], tr_id=resp_data['result']['tr_id'],                status=False, amount=data['amount'], expire=data['expire'],                receiver=wallet.card_number, option="CardToWallet", context=str(resp_data)            )        except:            return Response({'status': True, 'message': "TransferModel object create failed!",                             'tr_id': resp_data['result']['tr_id']})        return Response(resp_data)    else:        TransactionsModel.objects.create(            sender=data['number'], tr_id="*********",            status=False, amount=data['amount'], expire=wallet.expire,            receiver=wallet.card_number, option="CardToWallet", context=str(resp_data)        )        return Response({'message': 'Service is not working.'})def confirm_transfer_service(data):    payload = {        "id": "{{$randomUUID}}",        "method": "transfer.confirm",        "params": {            "tr_id": f"{data['tr_id']}",            "code": f"{data['code']}",        }    }    try:        resp_data = accio(payload=payload, service_name='ucoin')    except:        return Response({"status": False, "message": "Service is not working!"},                        status.HTTP_400_BAD_REQUEST)    if resp_data["status"]:        try:            transaction = TransactionsModel.objects.get(tr_id=data['tr_id'])        except TransactionsModel.DoesNotExist:            return Response({'status': True, 'message': "TransactionsModel object update failed!",                             'tr_id': data['tr_id']})        transaction.status = True        transaction.save(update_fields=["status"])        return Response(resp_data)    elif int(resp_data['error']['code']) == 404:        return Response({"status": False, "message": resp_data}, status=status.HTTP_404_NOT_FOUND)    elif int(resp_data['error']['code']) == -10:        return Response({"status": False, "message": {            "uz": "Hisobda yetarli mablag' mavjud emas",            "ru": "Недостаточно денег на счету",            "en": "There is not enough money in the account"        }})    else:        return Response({"status": False, "message": resp_data})def wallet_to_epos(wallet, amount):    if amount < 0:        print(f"***message: amount is subzero")        return Response(status=status.HTTP_400_BAD_REQUEST, data={"message": "amount is subzero"})    payload = {        "id": "{{$randomUUID}}",        "method": "transfer.walletepos",        "params": {            "number": f"{wallet.card_number}",            "expire": f"{wallet.expire}",            "receiver": f"{WALLET_EPOS}",            "amount": f"{amount}",        }    }    try:        response_data = accio(payload=payload, service_name='ucoin')    except:        return {'message': 'Service is not working.', 'status': False}    if response_data['status']:        print(f"Birinchi status\n {response_data}")        return transaction_log(response_data, wallet.card_number, WALLET_EPOS, amount,                               "WalletToEpos", True)    elif int(response_data['error']['code']) == -15:        print(f"2 status\n {response_data}")        return response_data, None    else:        print(f"oxiri status\n {response_data}")        return transaction_log(response_data, wallet.card_number, WALLET_EPOS, amount,                               "WalletToEpos", False)def epos_to_wallet(receiver, amount):    if amount < 0:        print(f"***message: amount is subzero")        return Response(status=status.HTTP_400_BAD_REQUEST, data={"message": "amount is subzero"})    payload = {        "id": "{{$randomUUID}}",        "method": "transfer.walletepos",        "params": {            "number": f"{WALLET_EPOS}",            "receiver": f"{receiver}",            "amount": f"{amount}",        }    }    try:        response_data = accio(payload=payload, service_name='ucoin')    except:        return {'message': 'Service is not working.'}    if response_data['status']:        data = response_data        transaction_log(data, WALLET_EPOS, receiver, amount, "EposToWallet", data['status'])        return data    elif response_data['error']['code'] == -15:        return response_data    else:        transaction_log(            response_data, WALLET_EPOS, receiver, amount, "EposToWallet", response_data['status']        )        return response_datadef send_otp(user: Account, object_id, comment) -> OtpModel:    otp = 1234    otp_token = str(uuid.uuid4())    otp = OtpModel.objects.create(otp=otp, otp_token=otp_token, comment=comment, user=user,                                  object_id=object_id)    # sending otp    return otpdef check_otp(user, otp, otp_token, comment) -> Union[bool, OtpModel]:    try:        opt: OtpModel = OtpModel.objects.get(user=user, otp=str(otp), otp_token=otp_token,                                             comment=comment)        if opt.is_active:            return opt        return False    except OtpModel.DoesNotExist:        return False#testdef w2w_step_one(sender: WalletModel, receiver: WalletModel, amount):    t_id = uuid.uuid4()    w2w = TransferW2WModel.objects.create(t_id=t_id, sender=sender, receiver=receiver,                                          amount=amount * 100)    otp = send_otp(sender.owner, w2w.id, "w2w")    return otp.otp_tokendef w2w_step_two(user, otp, otp_token):    otp = check_otp(user, otp, otp_token, "w2w")    if otp:        w2w = TransferW2WModel.objects.get(id=otp.object_id)        wallet_to_epos_response, w2e_tr_obj = wallet_to_epos(w2w.sender, w2w.amount)        w2w.wallet_to_epos_id = w2e_tr_obj.id        if wallet_to_epos_response["status"]:            w2w.wallet_to_epos = True            w2w.wallet_to_epos = wallet_to_epos_response['result']['tr_id']            epos_to_wallet_response, e2w_tr_obj = epos_to_wallet(w2w.receiver, w2w.amount)            w2w.epos_to_wallet = epos_to_wallet_response['result']['tr_id']            w2w.epos_to_wallet_id = e2w_tr_obj.id            w2w.epos_to_wallet_status = epos_to_wallet_response["status"]            if epos_to_wallet_response["status"]:                return Response({"status": True})            else:                return Response({"status": False})        return Response({"status": False})    return Response({"message": "OTP expired or wrong"})