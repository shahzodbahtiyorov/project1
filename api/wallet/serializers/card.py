from rest_framework import serializersfrom apps.wallet.models import CardModel, TransferW2WModel, TransactionsModelfrom services.card_background.background import get_background, get_logoclass CardDetailsSerializer(serializers.Serializer):    card_number = serializers.CharField(max_length=16, min_length=16, required=True)    expire = serializers.CharField(min_length=5, max_length=5, help_text="05/27")    card_name = serializers.CharField(max_length=200)class OtpCheckSerializer(serializers.Serializer):    otp = serializers.CharField()    otp_token = serializers.CharField()class CardModelSerializer(serializers.ModelSerializer):    class Meta:        model = CardModel        fields = ['id', 'mask', 'card_uuid', 'card_name', 'balance', 'card_owner_name', 'balance',                  'bank', 'pc_type','active']    def to_representation(self, instance):        representation = super().to_representation(instance)        representation['balance'] = instance.balance / 100        return representationclass CardModelBalanceSerializer(serializers.ModelSerializer):    images = serializers.SerializerMethodField()    image_log = serializers.SerializerMethodField()    class Meta:        model = CardModel        fields = ['id', 'mask', 'card_uuid', 'card_name', 'balance', 'card_owner_name', 'balance',                  'bank', 'pc_type','active','images','image_log','card_number','blocked']    def get_images(self, instance):        image_path = get_background(instance.card_number)        return image_path    def get_image_log(self, instance):        image_path = get_logo(instance.card_number)        return image_path    def to_representation(self, instance):        representation = super().to_representation(instance)        representation['balance'] = instance.balance / 100        return representationclass TransferSerializer(serializers.Serializer):    number = serializers.CharField(required=True, allow_blank=True, max_length=100)    expire = serializers.CharField(min_length=5, max_length=5, help_text="05/27")    amount = serializers.IntegerField(required=True)class ConfirmTransferSerializer(serializers.Serializer):    tr_id = serializers.CharField(required=True, allow_blank=False, max_length=100)    code = serializers.CharField(required=False, allow_blank=True, max_length=100)class W2WSerializer(serializers.Serializer):    receiver = serializers.CharField(required=True, allow_blank=True, max_length=100)    amount = serializers.IntegerField(required=True)class W2WModelSerializer(serializers.ModelSerializer):    class Meta:        model = TransferW2WModel        fields = ["sender", "receiver", "amount", ]class CardInfoSerializer(serializers.Serializer):    amount = serializers.IntegerField(required=True)    number = serializers.CharField(required=True, allow_blank=True, max_length=100)    expire = serializers.CharField(max_length=4)    receiver = serializers.CharField(required=True, allow_blank=True, max_length=100)class P2PCardSerializer(serializers.Serializer):    code = serializers.CharField(required=True, allow_blank=True, max_length=100)    sender_ext_id = serializers.CharField(required=True, allow_blank=True, max_length=100)    receiver_ext_id = serializers.CharField(required=True, allow_blank=True, max_length=100)class TransferCofirmeSerializer(serializers.Serializer):    receiver_ext_id = serializers.CharField(required=True, allow_blank=True, max_length=100)class HumoInfoSerializer(serializers.Serializer):    otp_code = serializers.CharField(required=True, allow_blank=True, max_length=100)    code = serializers.CharField(required=True)    number = serializers.CharField(required=True, allow_blank=True, max_length=100)    expire = serializers.CharField(min_length=4, max_length=4)    card_name = serializers.CharField(max_length=100, allow_blank=True, required=True)class UzcardInfoSerializer(serializers.Serializer):    ext_id = serializers.CharField(required=True, allow_blank=True, max_length=100)    number = serializers.CharField(required=True, allow_blank=True, max_length=100)    expire = serializers.CharField(min_length=4, max_length=4)    code = serializers.CharField(required=True, allow_blank=True, max_length=100)    card_name = serializers.CharField(max_length=100, allow_blank=True, required=True)class CardAboutSerializers(serializers.Serializer):    receiver = serializers.CharField(required=True, allow_blank=True, max_length=100)class TransferSerializers(serializers.ModelSerializer):    class Meta:        model = TransactionsModel        fields = "__all__"class CardToken(serializers.Serializer):    token = serializers.CharField(required=True, allow_blank=True, max_length=100)class CardTransferSerializer(serializers.Serializer):    amount = serializers.IntegerField(required=True)    ext_id = serializers.CharField(required=True, allow_blank=True, max_length=100)    receiver = serializers.CharField(required=True, allow_blank=True, max_length=100)class CommissionCardSerializer(serializers.Serializer):    name = serializers.CharField(required=True, allow_blank=True, max_length=100)    in_merchant = serializers.CharField(required=True, allow_blank=True, max_length=100)    in_terminal = serializers.CharField(required=True, allow_blank=True, max_length=100)    out_terminal = serializers.CharField(required=True, allow_blank=True, max_length=100)    out_merchant = serializers.CharField(required=True, allow_blank=True, max_length=100)class CardDeleteSerializers(serializers.Serializer):    card_id = serializers.IntegerField(required=True)class CardBlockedSerializers(serializers.Serializer):    is_blocked = serializers.BooleanField(required=True)    card_id = serializers.IntegerField(required=True)class CardNameSerializer(serializers.Serializer):    name = serializers.CharField(required=True, allow_blank=True, max_length=100)    card_id = serializers.IntegerField(required=True)