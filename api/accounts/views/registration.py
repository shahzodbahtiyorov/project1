"""API views for user account management.This module contains views for creating a user, updating user account information,and retrieving the profile information of the authenticated user."""from drf_yasg.utils import swagger_auto_schemafrom rest_framework.decorators import api_view, permission_classesfrom rest_framework.permissions import IsAuthenticatedfrom rest_framework.response import Responsefrom rest_framework_simplejwt.tokens import RefreshTokenimport randomfrom api.accounts.serializers import UserRegisterSerializer, UpdateAccountModelSerializer, \    SmsPhoneSerializerfrom apps.accounts.models import Accountfrom services.unigate.dragon import send_sms@swagger_auto_schema(    method="post",    tags=["account"],    request_body=UserRegisterSerializer)@api_view(["POST", ])def create_user_view(request):    """       Handles user registration.       - Retrieves or creates a user based on the provided phone number.       - Generates JWT tokens (refresh and access).       - Returns a response with the JWT tokens and a status indicating whether the user was newly created.       """    context = {}    user, created = Account.objects.get_or_create(phone_number=request.data["phone"])    refresh = RefreshToken.for_user(user)    context['jwt_token'] = {        'status': True,        'created': created,        'refresh': str(refresh),        'access': str(refresh.access_token),    }    return Response(context, status=200)@swagger_auto_schema(    method="post",    tags=["account"],    request_body=UpdateAccountModelSerializer)@api_view(["POST", ])@permission_classes([IsAuthenticated, ])def update_user_account(request):    """      Allows an authenticated user to update their account information.      - Uses `UpdateAccountModelSerializer` to validate and update the user's data.      - Returns the updated user data if valid, or validation errors if invalid.      """    user = request.user    serializer = UpdateAccountModelSerializer(user, data=request.data)    if serializer.is_valid():        serializer.save()        return Response(serializer.data, status=200)    return Response(serializer.errors, status=400)@swagger_auto_schema(    method="get",    tags=["account"], )@api_view(["GET", ])@permission_classes([IsAuthenticated, ])def get_user_profile(request):    """       Retrieves the profile information of the authenticated user.       - Serializes the user's data using `UpdateAccountModelSerializer`.       - Adds the `phone_number` to the response data.       - Returns the serialized user data.    """    user: Account = request.user    serializer = UpdateAccountModelSerializer(user)    data = serializer.data    data["phone_number"] = user.phone_number    return Response(serializer.data, status=200)